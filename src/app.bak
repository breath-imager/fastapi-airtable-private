from dotenv import load_dotenv
from functools import lru_cache
import os
import pathlib
from fastapi import FastAPI, Form, Request
from fastapi.templating import Jinja2Templates
from .airtable import Airtable
BASE_DIR = pathlib.Path(__file__).parent  # src


app = FastAPI()
templates = Jinja2Templates(directory=BASE_DIR / "templates")
# http://localhost:3000/abc # route -> # path


@lru_cache()
def cached_dotenv():
    load_dotenv()


cached_dotenv()
# print("AIRTABLE_BASE_ID", os.environ.get("AIRTABLE_BASE_ID"))

AIRTABLE_BASE_ID = os.environ.get("AIRTABLE_BASE_ID")
AIRTABLE_API_KEY = os.environ.get("AIRTABLE_API_KEY")
AIRTABLE_TABLE_NAME = os.environ.get("AIRTABLE_TABLE_NAME")


@app.get("/")
async def home_view(request: Request):

    return templates.TemplateResponse("home.html", {"request": request})


@app.post("/")
def home_signup_view(request: Request, email: str = Form(...)):
    """
    TODO add CSRF for security
    """

    # to send email to airtable
    airtable_client = Airtable(
        base_id=AIRTABLE_BASE_ID,
        api_key=AIRTABLE_API_KEY,
        table_name=AIRTABLE_TABLE_NAME,
    )

    did_retrieve = airtable_client.retrieve_record(
        "0x5A94f1491044953d3874fABfAc75df21BF31893B")

    did_send = airtable_client.create_records({"email": email})
    return templates.TemplateResponse(
        "home.html",
        {
            "request": request,
            "submitted_email": email,
            "did_send": did_send,
            "did_retrieve": did_retrieve
        }
    )
